---

 - hosts: manager

   tasks:
   
   - file: path=/usr/local/jupyterhub state=directory mode=0775 owner=jupyter group=admin
   
   - file: path=/var/local/jupyterhub state=directory mode=0775 owner=jupyter group=admin
   
   - file: path=/var/local/jupyterhub/data state=directory mode=0775 owner=jupyter group=admin
   
   - file: path=/etc/jupyterhub state=directory mode=0775 owner=jupyter group=admin
   
   - name: Create python environment
     shell: virtualenv --python=python3.6 pyenv
     args:
       chdir: ~jupyter
       creates: ~jupyter/pyenv
     become: true
     become_user: jupyter

   - name: Copy server key for JupyterHub
     copy: src=certs/server.key dest=/etc/jupyterhub/server.key owner=jupyter group=admin mode=0600

   - name: Copy server certificate for JupyterHub
     copy: src=certs/server.crt dest=/etc/jupyterhub/server.crt owner=jupyter group=admin mode=0644
   
   - name: Copy user database in JSON format
     copy: content={{jupyterhub.users | to_nice_json}} dest=/etc/jupyterhub/users.json owner=jupyter group=admin
   
   - name: Copy service descriptor in docker-compose.yml
     copy: src=files/jupyterhub/docker-compose.yml dest=/usr/local/jupyterhub/docker-compose.yml owner=jupyter group=admin

   - name: Copy Dockerfile
     template: src=templates/jupyterhub/Dockerfile.j2 dest=/usr/local/jupyterhub/Dockerfile owner=jupyter group=admin

   - name: Generate configuration for JupyterHub 
     template: src=templates/jupyterhub/config.py.j2 dest=/usr/local/jupyterhub/jupyterhub_config.py owner=jupyter group=admin
  
   - name: Copy Helix-specific Python modules (for volume naming etc.)
     copy: src=files/jupyterhub/{{item}} dest=/usr/local/jupyterhub/ owner=jupyter group=admin
     with_items: ['volume-naming-strategy']

   - name: Copy README
     copy: src=files/jupyterhub/README-compose.md dest=/usr/local/jupyterhub/README.md owner=jupyter group=admin

   - name: Pull docker image for JupyterHub application
     shell: >
       docker pull '{{jupyterhub.registry + "/" if jupyterhub.registry else ""}}jupyterhub/jupyterhub:{{jupyterhub.version}}'

   - name: Check if private network exists
     shell: docker network ls --quiet --filter='Name=jupyterhub_network'
     register: docker_network_search_result

   - set_fact:
       jupyterhub_network_id: '{{docker_network_search_result.stdout}}'  

   - name: Create private (overlay) network for JupyterHub
     shell: docker network create --driver overlay --attachable jupyterhub_network
     when: not jupyterhub_network_id


 - hosts: [ 'manager', 'workers' ]

   tasks:   
   
   - set_fact:
       nfs_server: '{{hostvars["nfs"].hostname}}'

   - name: Pull docker image for single-user notebook server
     shell: >
       docker pull '{{jupyterhub.registry + "/" if jupyterhub.registry else ""}}{{item}}'
     with_items: '{{jupyterhub.notebook_images}}'
   
   - name: Mount NFS directory for user data
     mount:
       name: /mnt/nfs-jupyterhub
       src: '{{nfs_server}}:/var/local/nfs/jupyterhub'
       fstype: nfs 
       opts: noauto,noexec,rsize=4096,hard,wsize=4096,intr
       state: mounted


 - hosts: manager
   
   tasks:

   - name: Create directory structure for user data
     file: path=/mnt/nfs-jupyterhub/work/users state=directory mode=0755
