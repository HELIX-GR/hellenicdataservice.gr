---

 #
 # Basic setup
 #

 - hosts: all 
   
   tasks:
   
   - debug: var=play_hosts
   - debug: var=groups.all
   
   - apt: update_cache=yes
   
   - apt: pkg={{item}} state=latest
     with_items: [ 'vim', 'tree', 'jq', 'curl', 'screen', 'htop', 'bash-completion']
  
   - hostname: name={{hostname}}
     when: hostname is defined

   - name: Update /etc/hosts with local hostname
     lineinfile:
       dest: /etc/hosts
       regexp: '^127\.0\.1\.1'
       line: '127.0.1.1 {{ansible_hostname}} {{hostname}}'
       state: present
     when: hostname is defined 

   - name: Update /etc/hosts with hostnames of this swarm
     lineinfile:
       dest: /etc/hosts
       line: '{{hostvars[item].ipv4_address}} {{hostvars[item].hostname}} {{item}}'
       insertafter: '^127\.0\.1\.1 .*'
     with_items: '{{groups.all}}'

   - group: name=wheel state=present
   
   - name: Add rules for sudoers (wheel)
     copy:
       dest: /etc/sudoers.d/wheel
       content: '%wheel ALL=(ALL) NOPASSWD:ALL'

   - file: path=~/bin state=directory
   
   - copy: src=files/{{item.key}} dest=~/{{item.value}} mode=0644
     with_dict: { 'profile': '.profile', 'bashrc': '.bashrc' }
    
   - authorized_key:
       user: root
       state: present
       key: '{{lookup("file", "keys/id_rsa.pub")}}'
   

 - hosts: manager

   tasks:

   - apt_repository: repo=ppa:deadsnakes/ppa state=present
   - apt: update_cache=yes
   
   - apt: pkg={{item}} state=latest
     with_items: [ 'python3.6', 'python3.6-venv', 'virtualenv' ]
   
   - name: Add user `jupyter` 
     user: name=jupyter shell=/bin/bash groups=wheel
      
   - file: path=/home/jupyter/bin state=directory owner=jupyter group=admin mode=0775
     with_items: [ '/home/jupyter/bin', '/home/jupyter/opt' ] 

   - authorized_key:
       user: jupyter
       state: present
       key: '{{lookup("file", "keys/id_rsa.pub")}}'


 #
 # Setup docker
 #

 - hosts: ['manager', 'workers']

   pre_tasks:

   - name: Check that a proper ipv4 network is specified
     assert:
       that: 
       - (network is defined) and (network | ipaddr("network"))
       - (ipv4_address is defined) and (ipv4_address | ipaddr(network))
      
   - set_fact:
       primary_ipv4_address: "{{ansible_all_ipv4_addresses| ipaddr(network)| first}}"
  
   - set_fact:    
       listen_address: '{{primary_ipv4_address}}'
     when: listen_to_primary_ipv4_address is defined

   - name: Check that primary ipv4 address is discovered into facts
     assert:
       that: primary_ipv4_address == ipv4_address

   vars:

     docker_compose_version: '1.16.1'

   roles:
   - 'docker-engine'

 
 - hosts: manager

   tasks: 

   - name: Add user `jupyter` to docker group
     user: name=jupyter groups=docker append=yes

#
# Setup NFS server and clients
#

 - hosts: all

   tasks:

   - apt: pkg={{item}} state=latest
     with_items: [ 'nfs-common' ]

   - file: path={{item}} state=directory
     with_items: [ '/mnt/nfs-backups', '/mnt/nfs-jupyterhub' ]
 
   - lineinfile:
       dest: /etc/fstab
       regexp: '\s\/mnt\/nfs-jupyterhub\s'
       line: >
         {{hostvars['nfs'].hostname}}:/var/local/nfs/jupyterhub 
         /mnt/nfs-jupyterhub nfs noauto,noexec,rsize=4096,hard,wsize=4096,intr 0 0
       state: present

 - hosts: nfs

   tasks:

   - apt: pkg={{item}} state=latest
     with_items: [ 'nfs-kernel-server' ]
   
   - file: path=/var/local/nfs state=directory mode=0775 owner=nobody group=nogroup
   
   - file: path={{item}} state=directory mode=0775 owner=nobody group=nogroup
     with_items: [ '/var/local/nfs/backups', '/var/local/nfs/jupyterhub' ]

   - name: Generate /etc/exports
     template:
       src: templates/nfs/exports.j2
       dest: /etc/exports

   - name: Reload /etc/exports
     shell: exportfs -a -v

